
/**
 	* Will update an element based on an event. 
 	* Workflow: 
 	* 1. The 'eventName' occurence on the 'actionedElement' will determine the execution 
 	*	of 'handler' function
	* 2. The 'handler' function will create an HmlHttpRequest to the 'handlerUrl'
	*	 using handlerMethod and handlerParam. 
	*3. The 'handler' function will replace the 'handlerTarget' element with with the HTML returned at step 
	*	number 2. 
	* 
	*@param actionedElement is the element that will cause the action to execute. 
	* 					Typically, this will be a button, but is not restricted only to this. 
	*
	* @param eventName is the event on witch our actiondElement will start the action execution.
	* 					Typically, it will be an DOM Level 2 Events (http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings)
	* 					Important events are : load, click, select, change, submit, reset, focus, etc. 
	* 
	* @param handlerUrl is the url to witch the XHR will be sent
	* 
	* @param handlerTarget is the element that will be replaced based on the XHR Response.
	* 
	* @param handlerParam is the list of parameters that will be sent to the handlerUrl, using XHR
	* 					 
	*/


function dcmsUpdateElement(actionedElement, eventName, handlerUrl, 
						   handlerMethod, handlerTarget, handlerParams) {
	
	//alert('Enter dcmsUpdateElement');
	var handlerObj = {
							url: 	handlerUrl, 
							method: handlerMethod, 
							params: handlerParams, 
							target: handlerTarget };
							
	/**
	 * We bind the event to the object handlerObj.
	 * That means tha in our handler function we will reference handlerObj as 'this'
	 */
	Event.observe(actionedElement,eventName,handler.bindAsEventListener(handlerObj));
		
	//alert ('exit dcmsUpdateElement');
}

function replaceElement (handlerObj) {
	
	 alert (handlerObj.target);
	
}

function handler (event) {
	
	alert('in handler function!'+this.target);

	new Ajax.Request(this.url, {		
								method : this.method,
								parameters: Object.toJSON(this.params),  								
    						  	/**
    						  	 * onSuccess function perform the replace of the target element.
    						  	 */
    						  	onSuccess : function(transport)
    						  	
    						  	 {
    							  	
    							   	var response = transport.responseText || "no response text";
      								alert("target:"+this.target);
      								alert("Success! \n\n" + response);
      								
      								//Replace the target element with the received response.
      								//$('locationList').replace(response);
      								if (($this.target != 'null') && (response != 'null')) {
      									$(this.target).replace($response);
      								}
      								else {
   										alert ('Unable to perform update!');
      								}
      							} 
    							  
    								
	});

    alert('exit HandlerFunction');							 
	
}


