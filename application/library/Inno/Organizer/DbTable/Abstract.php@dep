<?php
/**
 * 	This class will be used to store Inno_Organzers.
 *  It contains the logic to manipulate organizers.
 *	Every class used to represent organizers must inherit this class. 
 * 
 */


abstract class Inno_Organizer_DbTable_Abstract extends Inno_Db_Table_Abstract
{
	
	protected $_name = null;

	public function __construct ($config = array())
	{
		if ($this->_name === null) {
			throw new Inno_Organizer_Exception('DB name >' . $this->_name . '< cannot be null.');  
		}
		
		parent::__construct($config);
	}

	/**
	 * Find attributes specified by $attrs for the given ID
	 * @return assoc array (attr=>val)
	 */
	public function findAttrs($id, array $attrs)
	{
		$select = $this->select()
		->from($this->_name, $attrs)
		->where('id = ?', $id)
		;
			
		$stmt 	= $this->getAdapter()->query($select);
		$rowset = $stmt->fetchAll();
		return $rowset[0];
	}
	/**
	 * Return a rowset that describe the path
	 * 
	 * @param Inno_Organizer $organizer
	 * @return 	rowset order from root to organizer. (including organizer)
	 * 			The rowset will contain {parentName,parentId}
	 */
	public function findPath(Inno_Organizer $organizer)
	{
		/**
		 *  SELECT parent.id, parent.name
		 * 	FROM  equipment_class AS node,
		 * 		  equipment_class AS parent
		 * 	WHERE node.lft BETWEEN parent.lft AND parent.rgt
		 * 	AND   node.id = '10'
		 *  ORDER BY parent.lft;
		 *
		 * How it works :
		 *		1. We obtain all the parents of the given $organizer.
		 * 		 	The organizer is the node in this select
		 * 		2. We order the parents ascending by parent.lft attribute.
		 */		
		$select = $this->select()
		->from(array('node'=>$this->_name),
		array(/*'nodeName'=>'node.name', 'nodeId'=>'node.id'*/))
		->join(array('parent'=>$this->_name),
						'node.lft between parent.lft and parent.rgt',
		array('name'=>'parent.name', 'id'=>'parent.id'))
		->where('node.id = ?', $organizer->getId())
		//->where('node.id != parent.id')
		->order('parent.lft ASC')
		;

		$stmt 	= $this->getAdapter()->query($select);
		$rowset = $stmt->fetchAll();
		
		return $rowset;	
	}
	/**
	 * 
	 * 
	 *@return  Zend_Db_Select $select statement 
	 */
	public function findSubtreeChildsSelect(Inno_Organizer $organizer)
	{
		$select = $this->select()
			->from(array('node'=>$this->_name),
					array('nodeName'=>'node.name','nodeId'=>'node.id', 'refPk' => 'node.id'))
			->where('node.lft >= ?', $organizer->getLft())
			->where ('node.rgt <= ?', $organizer->getRgt());

		Zend_Debug::dump($organizer);	
		return $select; 	
	}
	/**
	 * Find all chids of a given Organizer.
	 * @param Inno_Organizer $organizer 
	 * @return childs from all levels, that are conected directly and 
	 * 	indirectly to the organizer 
	 */
	public function findSubtreeChilds (Inno_Organizer $organizer)
	{
		$select = $this->select()
			->from(array('node'=>$this->_name),
					array('nodeName'=>'node.name','nodeId'=>'node.id'))
			->where('node.lft >= ?', $organizer->getLft())
			->where ('node.rgt <= ?', $organizer->getRgt());
			
			
		$stmt 	= $this->getAdapter()->query($select);
		$rowset = $stmt->fetchAll();

		return $rowset;
		
	}
	/**
	 * get all childs of a given $organizer
	 *
	 * @return $rowset that contain all the childs of $organizer
	 * 			whith specific details { name,depth, parent,..}
	 */
	public function findChilds(Inno_Organizer $organizer)
	{

		/**$select = $this->select()
		->from(array('node'=>'dcms.locations'),
		array('nodeName'=>'node.name','nodeId'=>'node.id','nodeDepth'=>'COUNT(parent.id) -1'))
		->join(	array('parent'=>'dcms.locations'),
				'node.lft between parent.lft and parent.rgt',
				array())
		->where('parent.lft >= ?', $organizer->getLft())
		->where ('parent.rgt <= ?', $organizer->getRgt())
		->order('node.name')
		->group(array('node.id'))
		->having('nodeDepth = 1')	
		;*/
		$select = $this->findChildsSelect($organizer);

		$stmt 	= $this->getAdapter()->query($select);
		$rowset = $stmt->fetchAll();

		return $rowset;
	}
	
	/**
	 * The select that is used to retrieve all the childs of an organizer
	 * if returnLeafs and returnSubOrganizers are false => default values will be used. 
	 *
	 * @param Inno_Organizer $organizer
	 * @param boolean $returnLeafs 
	 * @param boolean $returnSubOrganizers 
	 * @return Zend_Db_Select $select statement  
	 */
	public function findChildsSelect(Inno_Organizer $organizer, $returnLeafs = false, $returnSubOrganizers = true)
	{	
		//select all both leafs and subOrganizers
		/**
		 * SELECT node.name, parent.name, (COUNT(parent.name) -1) as depth
		 * FROM equipment_class as node,
		 * 		equipment_class as parent
		 * WHERE node.lft between parent.lft and parent.rgt
		 * 		 and parent.lft >= '2' and parent.rgt <= '15'   --> here must be Lft and rgt attributes of the given node ID.
		 * GROUP BY node.name
		 * HAVING depth =1
		 * ;
		 *
		 * How it works:
		 * 		1. we obtain for the depth of every child in the subtree that has ID node as root.
		 * 		2. we keep only those nodes that have depth 1 ( that means that they
		 * 				are connected directly to the given $organizer.
		 * 		3. tge result will contain all the nodes
		 */		
		$select = $this->select()
				->from(array('node'=>$this->_name),
						array('refPk'=>'node.id', 'nodeName'=>'node.name','nodeId'=>'node.id','nodeDepth'=>'COUNT(parent.id) -1'))
				->join(array('parent'=>$this->_name),'node.lft between parent.lft and parent.rgt',
						array('parentName'=>'parent.name'))
				->where('parent.lft >= ?', $organizer->getLft())
				->where ('parent.rgt <= ?', $organizer->getRgt());
		if ( !($returnLeafs && $returnSubOrganizers) ) {
			if ($returnLeafs) {
				//restrict select to return only Leafs
				$select->where('node.lft = node.rgt - 1');
			}
			elseif ($returnSubOrganizers) {
				//restrict select to return only SubOrganizers.
				$select->where('node.lft < node.rgt -1');
			}
			else {
				// both $returnLeafs and $returnSubOrganizers are false, so we'll return an empty select
				$select->where('node.lft = node.rgt'); 
			}
			
		}
		
		
		
		//echo "Inno_Organizer_Model:140:<br>".$select->__toString().'<br/><br/><br/>';
		
		$select	->order('node.name')
			   	->group(array('node.id'))
		  		->having('nodeDepth = 1');

		 //Zend_Debug::dump($select->__toString()); 		
		return $select; 
	}
	 
	/**
	 * add a child to a given parent, with respect to the tree structure.
	 * The child will not have the ID set, because will be determined at insert time.
	 *  @TODO add as a comment the SQL script.
	 */
	public function addChild(Inno_Organizer $parent, Inno_Organizer $child)
	{
		$this->getAdapter()->beginTransaction();

		try {
			$rgt = $parent->getRgt();
				
			print_r("right:".$rgt."|");
			/**
			 * update lft and rgt values for all the nodes that are after parent node
			 * in hierarchy
			 */
			$val = new Zend_Db_Expr("rgt + 2");
			$this->update(array('rgt'=> $val),"rgt >= $rgt");
				
			$val = new Zend_Db_Expr("lft + 2");
			$this->update(array('lft'=> $val),"lft > $rgt");

			/**
			 * Insert the child.
			 */
			$insChild = array(	'name' => $child->getName(),
								'lft'  => $rgt , 
								'rgt'  => $rgt + 1);
				
			$a = $this->insert($insChild);
				
			print_r ("last insert: ".$a);
				
			/** Everything is OK. We commit the transaction */
			$this->getAdapter()->commit();
				
		} catch (Exception $e) {
				
			$this->getAdapter()->rollBack();
			print_r('ERROR - Transaction Rollback. Error message : '.$e->getMessage());
		}
	}


	public function deleteOrganizer(Inno_Organizer $organizer)
	{
		$rgt 	= $organizer->getRgt();
		$lft 	= $organizer->getLft();
		$width 	= $rgt - $lft + 1;
			
		$this->getAdapter()->beginTransaction();
		try {

			/**
			 *  delete the node and all his childrens  
			 */
			$this->delete("lft BETWEEN $lft and $rgt");

			/**
			 * Perform lft and rgt decrement for all the nodes that are after our node. 
			 * The decrement step ($width) is variable, 
			 * 	depends on the node's number of childs
			 */
			$val = new Zend_Db_Expr("rgt - $width");
			$this->update(array('rgt'=> $val),"rgt > $rgt");
				
			$val = new Zend_Db_Expr("lft - $width");
			$this->update(array('lft'=> $val),"lft > $rgt");

			/**
			 * if everything is ok, commit the transaction 
			 */
			$this->getAdapter()->commit();
		} catch (Exception $e) {
				
			$this->getAdapter()->rollBack();
			print_r('ERROR - Transaction Rollback. Error message : '.$e->getMessage());
			return FALSE; 
		}
		return TRUE;
	}

}
?>